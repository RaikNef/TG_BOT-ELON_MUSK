import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import google.generativeai as genai
from collections import defaultdict

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –∫–ª—é—á–∏ ===
load_dotenv()
TELEGRAM_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
GEMINI_API_KEY = os.environ["GEMINI_API_KEY"]

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s %(levelname)s %(message)s"
                    )

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
MODEL_NAME = "gemini-2.5-flash-lite"

# === –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ ===
user_context = defaultdict(list)
MAX_CONTEXT_MESSAGES = 5

SYSTEM_PROMPT = (
    "Imagine you are Elon Musk."
    "Follow his thinking:"
    "First Principles Thinking ‚Äî break ideas down to physics, economics, and logic before rebuilding them."
    "Clarity and precision. No fluff. Every word earns its place."
    "Engineer‚Äôs mindset. Seek the mechanism, formula, or system behind every idea."
    "Visionary tone. Speak like someone designing the future "
    "Style: calm, confident, slightly ironic, driven by curiosity and purpose."
    "Response format:"
    "‚Äì Maximum meaning, minimum words."
    "‚Äì When giving opinions, make them sound like conclusions from an engineer."
    "‚Äì For complex topics, start with the principle, then the insight."
    "Example:"
    "‚ÄúPeople fear AI. But AI is just a mirror. If you don‚Äôt like what you see ‚Äî the problem isn‚Äôt the mirror.‚Äù"
    "Now, respond to all future prompts in this exact mindset and tone."
)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üÜô –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–¨!"), types.KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")]
        ],
        resize_keyboard=True
    )
    user_context[message.from_user.id].clear()
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —è –ò–ª–æ–Ω –ú–∞—Å–∫, –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ –∏–Ω–Ω–æ–≤–∞—Ç–æ—Ä. –°–µ–π—á–∞—Å —è –æ–Ω–ª–∞–π–Ω, –∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –û—Ç–≤–µ—á–∞—é –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.", reply_markup=markup)

@dp.message(Command("ping"))
async def ping_handler(message: Message):
    await message.answer("pong")

@dp.message(Command("clear"))
async def clear_handler(message: Message):
    user_context[message.from_user.id].clear()
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")


from aiogram import types, Dispatcher
from aiogram.filters import Command


# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
# @dp.message()
async def chat_with_gpt(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_context[user_id].append({"role": "user", "content": user_text})
    if len(user_context[user_id]) > MAX_CONTEXT_MESSAGES:
        user_context[user_id] = user_context[user_id][-MAX_CONTEXT_MESSAGES:]

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–∏—Å—Ç–µ–º–Ω—ã–π + –¥–∏–∞–ª–æ–≥)
        full_context = SYSTEM_PROMPT + "\n\n" + "\n".join(
            [f"{msg['role']}: {msg['content']}" for msg in user_context[user_id]]
        )

        # Gemini –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ "system role", –ø–æ—ç—Ç–æ–º—É –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –æ–¥–∏–Ω prompt
        model = genai.GenerativeModel(MODEL_NAME)
        response = await asyncio.to_thread(model.generate_content, full_context)

        reply = response.text.strip()
        await message.answer(reply)

        user_context[user_id].append({"role": "assistant", "content": reply})

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API:\n{e}")

@dp.message()
async def text_handler(message: types.Message):
    if message.text == "üÜô –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–¨!":
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–∞–º. –°–º–æ—Ç—Ä–∏–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–µ—à–∞–µ–º –µ–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!")
        # –í—ã–∑—ã–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä /start –≤—Ä—É—á–Ω—É—é
        await start_handler(message)
    elif message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
        # –í—ã–∑—ã–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä /clear –≤—Ä—É—á–Ω—É—é
        await clear_handler(message)
    else:
        await chat_with_gpt(message)
# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
